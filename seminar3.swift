/* Задача 1 
Создать массив [5, 6, -14, 25], а затем создать новую переменную с 
отсортированным по возрастанию ранее созданным массивом. */

let a = [5, 6, -14, 25]
let b = a.sorted {$0 < $1}

/* Задача 2
Создать массив,  а затем создать переменную, в которой будет хранится ранее 
созданные массив, но в нем каждое значение должно быть увеличено на 5. */

let c = a.map {$0 + 5}

/* Задача 3
Создать массив,  а затем создать переменную, в которой будет хранится ранее 
созданные массив, но в нем не должно быть ни отрицательных чисел, ни числа 12, 
а также каждое значение должно быть увеличено в 2 раза. */

let d = a.map {$0 * 2}.filter {$0 > 0 && $0 != 12} //сначала увеличиваем, потом фильтруем

/* Задача 4
Создать словарь, в котором ключ будет целым числом, а значение строкой */

var e: [Int: String] = [:]

/* Задача 5
Создать массив [2, 6, 25, 4, 2, 2, 10, 2], затем создать новую переменную, в 
которой будут те же значения, что и в ранее созданном массиве, но не должно 
быть повторяющихся значений. */

let f = [2, 6, 25, 4, 2, 2, 10, 2]
let g = Set(f) // массив превращаем во множество
// let g = Array(Set(a)) // тоже, но с переводом обратно в массив

/* Задача 6
Написать функцию, которая на вход принимает массив целых чисел, а возвращает 
true или false. true, если результат сложения всех чисел массива больше или 
равно 100, false, если меньше 100 */

func check(f: [Int]) -> Bool {
    f.reduce(0, +) >= 100 //0 - начальное сначение к которому прибавляем элементы массива
}

/* Задача 7
Создать переменную, в которой будет хранится замыкание, в которое передается 
словарь с ключом типа Int и значением типа String, а в ходе выполнения замыкания 
в консоль печатаются все значения словаря, ключ у которых больше 5 */

let j = { (b: [Int: String]) in
    for (key, value) in b {
        if key > 5 {
            print(value)            
        }
    }
}

/* Задача 8
Создать перечисление, которое имеет в виде кейсов три вида чая: зеленый, черный 
и фруктовый. Затем создать словарь, в котором ключ это вид чая, а значение это 
стоимость и заполнить этот словарь. */

enum Tea {
    case black
    case green
    case fruit
}

let dict: [Tea: Double] = [.black: 50, .green: 60, .fruit: 90]

/* Задача 9
Написать функцию, которая на вход принимает такой же словарь, как в задании 1, 
а возвращает новый, который создан по следующим правилам: у фруктового чая 
стоимость должна быть увеличена на 30%, у черного уменьшена в 1.6 раза, а у 
зеленого уменьшена на 9.5% */
 
func change(dict: [Tea: Double]) -> [Tea: Double] {
    var newDict: [Tea: Double] = [:] // создание пустого словаря
    for (key, value) in dict {
        switch key {
        case .black: b.updateValue(value / 1.6, forKey: key)
        case .green: b.updateValue(value - (9.5 * value / 100), forKey: key)
        case .fruit: b.updateValue(value * 1.3, forKey: key)                  
        }
    }
    return newDict
}

/* Задача 10
Написать функцию, которая на вход принимает два целочисленных массива, которые 
содержат координаты начала и конца отрезка соответственно. Первый элемент 
массива это x, а второй y. Функция должна вернуть массив, который содержит 
координаты середины отрезка */

func calculate(a: [Int], b: [Int]) -> [Int] {
    guard a.count == 2 && b.count == 2 else { // отсекающее условие проверка 2х координат
        return []
    }
    return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2]
}

/* Задача 11
Написать функцию, которая на вход принимает массив из 4 целых чисел (если чисел 
меньше или больше должно вернуться nil). Функция возвращает новый массив, 
который состоит из 3 элементов, первый элемент это первый элемент переданного 
массива, второй элемент это сумма второго и третьего элемента (индексы 1 и 2) 
переданного массива, последний элемент это последний элемент переданного массива. 
Также этот массив должен быть отсортирован по убыванию. */

func calc(a: [Int]) -> [Int]? { //?- опционал, т.к. возможно возвращение nil
    guard a.count == 4 else {
        return nil
    }
    return [a[0], a[1] + a[2], a[3]].sorted { $0 > $1 }
}


/* Задача 12
Создайте массив, который состоит из всех целых чисел от 1 до 50 */

var arr = Array(1...50)

/* Задача 13
Напишите замыкание, которое принимает на вход два целых числа и возвращает их 
сумму, затем вызовите это замыкание */

 let a = { (b: Int, c: Int) in
    b + c
}

//print(a(4, 5))

/* Задача 14
Напишите функцию, которая на вход будет принимать замыкание, которое на вход 
принимает целое число, но ничего не возвращает. Функция также не должна ничего 
возвращать. Внутри функции должен печататься тип замыкания */

func test(a: (Int) -> Void) { //(Int) укащывает на зымыкание которе принимает Int
    print(type(of: a))
}

//test(a: { _ in }) передаём пустое замыкание

/* Задача 15
Создать массив и при помощи forEach вывести в консоль все значения */

var a = [5, 6, 7]
a.forEach { print($0) }